{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { catchError, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../services/auth.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction RegisterComponent_a_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"a\", 19);\n    i0.ɵɵtext(1, \"Register\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 20);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r1.errorMessage);\n  }\n}\nexport class RegisterComponent {\n  constructor(fb, authService, router) {\n    this.fb = fb;\n    this.authService = authService;\n    this.router = router;\n    this.registerForm = this.fb.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required],\n      confirmPassword: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]]\n    });\n  }\n  ngOnInit() {\n    this.authService.isAuthenticated$.subscribe(isAuth => {\n      this.isAuth = isAuth;\n    });\n  }\n  onSubmit() {\n    if (this.registerForm.invalid || this.registerForm.value.password !== this.registerForm.value.confirmPassword) {\n      this.errorMessage = 'Passwords do not match.';\n      return;\n    }\n    // Passwords match, proceed with registration\n    this.errorMessage = '';\n    const username = this.registerForm.get('username').value;\n    const password = this.registerForm.get('password').value;\n    const email = this.registerForm.get('email').value;\n    const userRegister = {\n      username,\n      password,\n      email\n    };\n    this.authService.registerAndLogin(userRegister).pipe(catchError(error => {\n      this.errorMessage = \"Error: Invalid Username or email.\";\n      return of(null);\n    })).subscribe(response => {\n      if (response && response.success) {\n        this.router.navigate(['/']);\n      }\n    });\n  }\n  static #_ = this.ɵfac = function RegisterComponent_Factory(t) {\n    return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.Router));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: RegisterComponent,\n    selectors: [[\"app-register\"]],\n    decls: 28,\n    vars: 3,\n    consts: [[\"type\", \"button\", \"class\", \"btn btn-primary\", \"routerLink\", \"/register\", \"href\", \"#mod1\", 4, \"ngIf\"], [\"id\", \"mode1\", 1, \"container\"], [1, \"col-6\", \"mx-auto\"], [1, \"card\", \"shadow\", \"border\", \"mt-4\"], [1, \"card-header\"], [1, \"modal-title\", \"fs-5\"], [1, \"card-body\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"mb-3\"], [\"for\", \"username\"], [\"type\", \"text\", \"formControlName\", \"username\", \"id\", \"username\", 1, \"form-control\"], [\"for\", \"email\"], [\"type\", \"email\", \"formControlName\", \"email\", \"id\", \"email\", 1, \"form-control\"], [\"for\", \"password\"], [\"type\", \"password\", \"formControlName\", \"password\", \"id\", \"password\", 1, \"form-control\"], [\"for\", \"confirmPassword\"], [\"type\", \"password\", \"formControlName\", \"confirmPassword\", \"id\", \"confirmPassword\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", 2, \"background-color\", \"#FF4500\"], [\"class\", \"alert alert-danger mt-3\", 4, \"ngIf\"], [\"type\", \"button\", \"routerLink\", \"/register\", \"href\", \"#mod1\", 1, \"btn\", \"btn-primary\"], [1, \"alert\", \"alert-danger\", \"mt-3\"]],\n    template: function RegisterComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, RegisterComponent_a_0_Template, 2, 0, \"a\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"h1\", 5);\n        i0.ɵɵtext(6, \"Register\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(7, \"div\", 6)(8, \"form\", 7);\n        i0.ɵɵlistener(\"ngSubmit\", function RegisterComponent_Template_form_ngSubmit_8_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(9, \"div\", 8)(10, \"label\", 9);\n        i0.ɵɵtext(11, \"Username\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(12, \"input\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"div\", 8)(14, \"label\", 11);\n        i0.ɵɵtext(15, \"Email\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(16, \"input\", 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"div\", 8)(18, \"label\", 13);\n        i0.ɵɵtext(19, \"Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(20, \"input\", 14);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"div\", 8)(22, \"label\", 15);\n        i0.ɵɵtext(23, \"Confirm Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(24, \"input\", 16);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(25, \"button\", 17);\n        i0.ɵɵtext(26, \"Register\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(27, RegisterComponent_div_27_Template, 2, 1, \"div\", 18);\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", !ctx.isAuth);\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"formGroup\", ctx.registerForm);\n        i0.ɵɵadvance(19);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorMessage);\n      }\n    },\n    dependencies: [i4.NgIf, i3.RouterLink, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n    styles: [\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcmVnaXN0ZXIvcmVnaXN0ZXIuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQW1ESyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG4vKiAuY29udGFpbmVyIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmNmY2ZjY7XHJcbiAgICBjb2xvcjogIzFiMWIxYjtcclxuICAgIHBhZGRpbmc6IDIwcHg7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjZmY0NTAwO1xyXG4gICAgYm9yZGVyLXJhZGl1czogOHB4O1xyXG4gICAgYm94LXNoYWRvdzogMCAycHggNHB4IHJnYmEoMCwgMCwgMCwgMC4xKTtcclxuICAgIHdpZHRoOiAzNiU7XHJcbiAgfVxyXG5cclxuICAucmVnaXN0ZXItaGVhZGVyIHtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjsgXHJcbiAgICBtYXJnaW4tYm90dG9tOiAyMHB4OyBcclxuICAgIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCAjZmY0NTAwO1xyXG4gICAgY29sb3I6ICMxYjFiMWI7IFxyXG4gICAgZm9udC1zaXplOiAyLjJyZW07XHJcbiAgfVxyXG5cclxuLmZvcm0tZ3JvdXAgbGFiZWwge1xyXG4gICAgY29sb3I6ICMxYjFiMWI7XHJcbiAgfVxyXG4gIFxyXG4gIC5mb3JtLWNvbnRyb2wge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcclxuICAgIGNvbG9yOiAjMWIxYjFiO1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgI2ZmNDUwMDtcclxuICAgIGJvcmRlci1yYWRpdXM6IDIwcHg7XHJcbiAgfVxyXG4gIFxyXG4gIC5idG4tcHJpbWFyeSB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmY0NTAwO1xyXG4gICAgYm9yZGVyOiBub25lO1xyXG4gICAgYm9yZGVyLXJhZGl1czogMjBweDtcclxuICAgIGN1cnNvcjogcG9pbnRlcjtcclxuICAgIGZvbnQtc2l6ZTogMTZweDtcclxuICAgIHBhZGRpbmc6IDhweCAxNnB4O1xyXG4gIH1cclxuICBcclxuICAuYnRuLXByaW1hcnk6aG92ZXIge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmOGM1YTtcclxuICAgIGNvbG9yOiAjZjVmNWY1ZDE7XHJcbiAgfVxyXG4gIFxyXG4gIC5hbGVydCB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjZmNmY2O1xyXG4gICAgY29sb3I6ICNmZjQ1MDA7XHJcbiAgICBib3JkZXI6IG5vbmU7XHJcbiAgICBib3JkZXItcmFkaXVzOiAyMHB4O1xyXG4gICAgZm9udC1zaXplOiAxNnB4O1xyXG4gICAgbWFyZ2luLXRvcDogMTBweDtcclxuICAgIHBhZGRpbmc6IDEwcHggMjBweDtcclxuICB9ICovIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["Validators","catchError","of","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","ctx_r1","errorMessage","RegisterComponent","constructor","fb","authService","router","registerForm","group","username","required","password","confirmPassword","email","ngOnInit","isAuthenticated$","subscribe","isAuth","onSubmit","invalid","value","get","userRegister","registerAndLogin","pipe","error","response","success","navigate","_","ɵɵdirectiveInject","i1","FormBuilder","i2","AuthService","i3","Router","_2","selectors","decls","vars","consts","template","RegisterComponent_Template","rf","ctx","ɵɵtemplate","RegisterComponent_a_0_Template","ɵɵlistener","RegisterComponent_Template_form_ngSubmit_8_listener","ɵɵelement","RegisterComponent_div_27_Template","ɵɵproperty"],"sources":["C:\\Users\\in7rt\\Documents\\atlaq\\angular-1\\ang\\src\\app\\register\\register.component.ts","C:\\Users\\in7rt\\Documents\\atlaq\\angular-1\\ang\\src\\app\\register\\register.component.html"],"sourcesContent":["// TypeScript Code\nimport { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService } from '../services/auth.service';\nimport { Router } from '@angular/router';\nimport { ServiceResponse } from '../services/service-response.service';\nimport { catchError, of } from 'rxjs';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent {\n  registerForm: FormGroup;\n  errorMessage: string;\n  isAuth: boolean;\n\n\n  constructor(private fb: FormBuilder, private authService: AuthService, private router: Router) {\n    this.registerForm = this.fb.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required],\n      confirmPassword: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]]\n    });\n  }\n  \n  ngOnInit() {\n    this.authService.isAuthenticated$.subscribe(isAuth => {\n      this.isAuth = isAuth;\n    });\n  }\n\n  onSubmit() {\n    if (this.registerForm.invalid || this.registerForm.value.password !== this.registerForm.value.confirmPassword) {\n      this.errorMessage = 'Passwords do not match.';\n      return;\n    }\n\n    // Passwords match, proceed with registration\n    this.errorMessage = '';\n\n    const username = this.registerForm.get('username').value;\n    const password = this.registerForm.get('password').value;\n    const email = this.registerForm.get('email').value;\n\n    const userRegister = { username, password, email };\n\n    this.authService.registerAndLogin(userRegister)\n      .pipe(\n        catchError((error) => {\n          this.errorMessage = \"Error: Invalid Username or email.\";\n          return of(null);\n        })\n      )\n      .subscribe(\n        (response: ServiceResponse<any>) => {\n          if (response && response.success) {\n            this.router.navigate(['/']);\n          }\n        }\n      );\n  }\n}\n","<a type=\"button\" class=\"btn btn-primary\" *ngIf=\"!isAuth\" routerLink=\"/register\" href=\"#mod1\">Register</a>\n\n<div class=\"container\" id=\"mode1\">\n  <div class=\"col-6 mx-auto\">\n    <div class=\"card shadow border mt-4\">\n      <div class=\"card-header\">\n        <h1 class=\"modal-title fs-5\">Register</h1>\n      </div>\n      <div class=\"card-body\">\n        <form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\">\n          <div class=\"mb-3\">\n            <label for=\"username\">Username</label>\n            <input type=\"text\" formControlName=\"username\" id=\"username\" class=\"form-control\">\n          </div>\n          <div class=\"mb-3\">\n            <label for=\"email\">Email</label>\n            <input type=\"email\" formControlName=\"email\" id=\"email\" class=\"form-control\">\n          </div>\n          <div class=\"mb-3\">\n            <label for=\"password\">Password</label>\n            <input type=\"password\" formControlName=\"password\" id=\"password\" class=\"form-control\">\n          </div>\n          <div class=\"mb-3\">\n            <label for=\"confirmPassword\">Confirm Password</label>\n            <input type=\"password\" formControlName=\"confirmPassword\" id=\"confirmPassword\" class=\"form-control\">\n          </div>\n          <button type=\"submit\" class=\"btn\" style=\"background-color: #FF4500;\">Register</button>\n        </form>\n        <div class=\"alert alert-danger mt-3\" *ngIf=\"errorMessage\">{{ errorMessage }}</div>\n      </div>\n    </div>\n  </div>\n</div>\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}