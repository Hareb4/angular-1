{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let PostDetailComponent = class PostDetailComponent {\n  constructor(route, postService, commentService, authService, router) {\n    this.route = route;\n    this.postService = postService;\n    this.commentService = commentService;\n    this.authService = authService;\n    this.router = router;\n    this.newComment = {\n      content: ''\n    };\n  }\n  ngOnInit() {\n    this.isAuth = this.authService.isLoggedIn();\n    this.route.paramMap.subscribe(params => {\n      this.postId = +params.get('id');\n      this.loadPostDetails();\n      this.loadComments();\n      //console.log(this.route.snapshot.url[0].path + '/' + this.route.snapshot.url[1].path);\n    });\n  }\n\n  onSubmit() {\n    console.log('Submit button clicked');\n    this.route.paramMap.subscribe(params => {\n      this.postId = +params.get('id');\n      this.commentService.addComment(this.newComment, this.postId).subscribe(response => {\n        console.log('Comment added successfully!', response);\n        this.newComment = {\n          content: ''\n        };\n        this.router.navigate(['/addComment']);\n        history.back();\n      }, error => {\n        console.error('Error adding comment', error);\n      });\n    });\n  }\n  loadPostDetails() {\n    // Use the PostService to get the specific post details\n    this.postService.getPost(this.postId).subscribe(response => {\n      this.post = response.data;\n    });\n  }\n  loadComments() {\n    // Use the CommentService to get comments for the specific post\n    this.commentService.getCommentsByPost(this.postId).subscribe(response => {\n      this.comments = response.data;\n    });\n  }\n  deleteComment(commentId) {\n    // Get the postId from the route or any other way you have it available\n    const postId = this.postId; // Assuming postId is already available\n    this.commentService.deleteComment(postId, commentId).subscribe(response => {\n      console.log('Comment deleted successfully!', response);\n      // Reload comments or update the comments array\n      this.loadComments();\n    }, error => {\n      console.error('Error deleting comment', error);\n    });\n  }\n  onDeletePost(postId) {\n    this.postService.deletePost(postId).subscribe(response => {\n      console.log('Post deleted successfully!', response);\n      history.back();\n    }, error => {\n      console.error('Error deleting post', error);\n    });\n  }\n  onEditPost(postId) {\n    this.router.navigate(['/editPost', postId]);\n  }\n};\nPostDetailComponent = __decorate([Component({\n  selector: 'app-post-detail',\n  templateUrl: './post-detail.component.html',\n  styleUrls: ['./post-detail.component.css']\n})], PostDetailComponent);","map":{"version":3,"names":["Component","PostDetailComponent","constructor","route","postService","commentService","authService","router","newComment","content","ngOnInit","isAuth","isLoggedIn","paramMap","subscribe","params","postId","get","loadPostDetails","loadComments","onSubmit","console","log","addComment","response","navigate","history","back","error","getPost","post","data","getCommentsByPost","comments","deleteComment","commentId","onDeletePost","deletePost","onEditPost","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\in7rt\\Documents\\atlaq\\angular-1\\ang\\src\\app\\post-detail\\post-detail.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { PostService } from '../services/post.service';\nimport { CommentService } from '../services/comment.service';\nimport { AuthService } from '../services/auth.service';\nimport jwt_decode from 'jwt-decode';\n\n@Component({\n  selector: 'app-post-detail',\n  templateUrl: './post-detail.component.html',\n  styleUrls: ['./post-detail.component.css']\n})\n\nexport class PostDetailComponent implements OnInit{\n  postId: number;\n  post: any; // Variable to hold the post details\n  comments: any[];\n  isAuth: boolean;\n  newComment = { content: '' };\n\n  constructor(\n    private route: ActivatedRoute,\n    private postService: PostService,\n    private commentService: CommentService,\n    private authService: AuthService,\n    private router: Router\n  ) { }\n\n  ngOnInit(): void {\n    this.isAuth = this.authService.isLoggedIn();\n    this.route.paramMap.subscribe(params => {\n      this.postId = +params.get('id');\n      this.loadPostDetails();\n      this.loadComments();\n      //console.log(this.route.snapshot.url[0].path + '/' + this.route.snapshot.url[1].path);\n    });\n  }\n\n  onSubmit() {\n    console.log('Submit button clicked');\n    this.route.paramMap.subscribe(params => {\n      this.postId = +params.get('id');\n      this.commentService.addComment(this.newComment, this.postId).subscribe(\n        response => {\n          console.log('Comment added successfully!', response);\n          this.newComment = { content: '' };\n          this.router.navigate(['/addComment']);\n          history.back()\n        },\n        error => {\n          console.error('Error adding comment', error);\n        }\n      );\n    });\n  }\n\n  loadPostDetails() {\n    // Use the PostService to get the specific post details\n    this.postService.getPost(this.postId).subscribe(response => {\n      this.post = response.data;\n    });\n  }\n\n  loadComments() {\n    // Use the CommentService to get comments for the specific post\n    this.commentService.getCommentsByPost(this.postId).subscribe(response => {\n      this.comments = response.data;\n    });\n  }\n\n  deleteComment(commentId: number) {\n    // Get the postId from the route or any other way you have it available\n    const postId = this.postId; // Assuming postId is already available\n  \n    this.commentService.deleteComment(postId, commentId).subscribe(\n      response => {\n        console.log('Comment deleted successfully!', response);\n        // Reload comments or update the comments array\n        this.loadComments();\n      },\n      error => {\n        console.error('Error deleting comment', error);\n      }\n    );\n  }\n\n  onDeletePost(postId: number) {\n    this.postService.deletePost(postId).subscribe(\n      response => {\n        console.log('Post deleted successfully!', response);\n        history.back()\n      },\n      error => {\n        console.error('Error deleting post', error);\n      }\n    );\n  }\n\n  onEditPost(postId: number) {\n    this.router.navigate(['/editPost', postId]);\n  }\n\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAa1C,WAAMC,mBAAmB,GAAzB,MAAMA,mBAAmB;EAO9BC,YACUC,KAAqB,EACrBC,WAAwB,EACxBC,cAA8B,EAC9BC,WAAwB,EACxBC,MAAc;IAJd,KAAAJ,KAAK,GAALA,KAAK;IACL,KAAAC,WAAW,GAAXA,WAAW;IACX,KAAAC,cAAc,GAAdA,cAAc;IACd,KAAAC,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;IAPhB,KAAAC,UAAU,GAAG;MAAEC,OAAO,EAAE;IAAE,CAAE;EAQxB;EAEJC,QAAQA,CAAA;IACN,IAAI,CAACC,MAAM,GAAG,IAAI,CAACL,WAAW,CAACM,UAAU,EAAE;IAC3C,IAAI,CAACT,KAAK,CAACU,QAAQ,CAACC,SAAS,CAACC,MAAM,IAAG;MACrC,IAAI,CAACC,MAAM,GAAG,CAACD,MAAM,CAACE,GAAG,CAAC,IAAI,CAAC;MAC/B,IAAI,CAACC,eAAe,EAAE;MACtB,IAAI,CAACC,YAAY,EAAE;MACnB;IACF,CAAC,CAAC;EACJ;;EAEAC,QAAQA,CAAA;IACNC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;IACpC,IAAI,CAACnB,KAAK,CAACU,QAAQ,CAACC,SAAS,CAACC,MAAM,IAAG;MACrC,IAAI,CAACC,MAAM,GAAG,CAACD,MAAM,CAACE,GAAG,CAAC,IAAI,CAAC;MAC/B,IAAI,CAACZ,cAAc,CAACkB,UAAU,CAAC,IAAI,CAACf,UAAU,EAAE,IAAI,CAACQ,MAAM,CAAC,CAACF,SAAS,CACpEU,QAAQ,IAAG;QACTH,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEE,QAAQ,CAAC;QACpD,IAAI,CAAChB,UAAU,GAAG;UAAEC,OAAO,EAAE;QAAE,CAAE;QACjC,IAAI,CAACF,MAAM,CAACkB,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC;QACrCC,OAAO,CAACC,IAAI,EAAE;MAChB,CAAC,EACDC,KAAK,IAAG;QACNP,OAAO,CAACO,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C,CAAC,CACF;IACH,CAAC,CAAC;EACJ;EAEAV,eAAeA,CAAA;IACb;IACA,IAAI,CAACd,WAAW,CAACyB,OAAO,CAAC,IAAI,CAACb,MAAM,CAAC,CAACF,SAAS,CAACU,QAAQ,IAAG;MACzD,IAAI,CAACM,IAAI,GAAGN,QAAQ,CAACO,IAAI;IAC3B,CAAC,CAAC;EACJ;EAEAZ,YAAYA,CAAA;IACV;IACA,IAAI,CAACd,cAAc,CAAC2B,iBAAiB,CAAC,IAAI,CAAChB,MAAM,CAAC,CAACF,SAAS,CAACU,QAAQ,IAAG;MACtE,IAAI,CAACS,QAAQ,GAAGT,QAAQ,CAACO,IAAI;IAC/B,CAAC,CAAC;EACJ;EAEAG,aAAaA,CAACC,SAAiB;IAC7B;IACA,MAAMnB,MAAM,GAAG,IAAI,CAACA,MAAM,CAAC,CAAC;IAE5B,IAAI,CAACX,cAAc,CAAC6B,aAAa,CAAClB,MAAM,EAAEmB,SAAS,CAAC,CAACrB,SAAS,CAC5DU,QAAQ,IAAG;MACTH,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEE,QAAQ,CAAC;MACtD;MACA,IAAI,CAACL,YAAY,EAAE;IACrB,CAAC,EACDS,KAAK,IAAG;MACNP,OAAO,CAACO,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD,CAAC,CACF;EACH;EAEAQ,YAAYA,CAACpB,MAAc;IACzB,IAAI,CAACZ,WAAW,CAACiC,UAAU,CAACrB,MAAM,CAAC,CAACF,SAAS,CAC3CU,QAAQ,IAAG;MACTH,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEE,QAAQ,CAAC;MACnDE,OAAO,CAACC,IAAI,EAAE;IAChB,CAAC,EACDC,KAAK,IAAG;MACNP,OAAO,CAACO,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC7C,CAAC,CACF;EACH;EAEAU,UAAUA,CAACtB,MAAc;IACvB,IAAI,CAACT,MAAM,CAACkB,QAAQ,CAAC,CAAC,WAAW,EAAET,MAAM,CAAC,CAAC;EAC7C;CAED;AAzFYf,mBAAmB,GAAAsC,UAAA,EAN/BvC,SAAS,CAAC;EACTwC,QAAQ,EAAE,iBAAiB;EAC3BC,WAAW,EAAE,8BAA8B;EAC3CC,SAAS,EAAE,CAAC,6BAA6B;CAC1C,CAAC,C,EAEWzC,mBAAmB,CAyF/B"},"metadata":{},"sourceType":"module","externalDependencies":[]}