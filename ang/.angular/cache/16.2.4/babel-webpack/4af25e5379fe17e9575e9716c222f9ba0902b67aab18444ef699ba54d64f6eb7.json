{"ast":null,"code":"import { __decorate } from \"tslib\";\n// TypeScript Code\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { catchError, of } from 'rxjs';\nexport let RegisterComponent = class RegisterComponent {\n  constructor(fb, authService, router) {\n    this.fb = fb;\n    this.authService = authService;\n    this.router = router;\n    this.registerForm = this.fb.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required],\n      confirmPassword: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]]\n    });\n  }\n  ngOnInit() {\n    this.authService.isAuthenticated$.subscribe(isAuth => {\n      this.isAuth = isAuth;\n    });\n  }\n  onSubmit() {\n    if (this.registerForm.invalid || this.registerForm.value.password !== this.registerForm.value.confirmPassword) {\n      this.errorMessage = 'Passwords do not match.';\n      return;\n    }\n    // Passwords match, proceed with registration\n    this.errorMessage = '';\n    const username = this.registerForm.get('username').value;\n    const password = this.registerForm.get('password').value;\n    const email = this.registerForm.get('email').value;\n    const userRegister = {\n      username,\n      password,\n      email\n    };\n    this.authService.registerAndLogin(userRegister).pipe(catchError(error => {\n      this.errorMessage = \"Error: Invalid Username or email.\";\n      return of(null);\n    })).subscribe(response => {\n      if (response && response.success) {\n        this.router.navigate(['/']);\n      }\n    });\n  }\n};\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})], RegisterComponent);","map":{"version":3,"names":["Component","Validators","catchError","of","RegisterComponent","constructor","fb","authService","router","registerForm","group","username","required","password","confirmPassword","email","ngOnInit","isAuthenticated$","subscribe","isAuth","onSubmit","invalid","value","errorMessage","get","userRegister","registerAndLogin","pipe","error","response","success","navigate","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\in7rt\\Documents\\atlaq\\angular-1\\ang\\src\\app\\register\\register.component.ts"],"sourcesContent":["// TypeScript Code\nimport { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService } from '../services/auth.service';\nimport { Router } from '@angular/router';\nimport { ServiceResponse } from '../services/service-response.service';\nimport { catchError, of } from 'rxjs';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent {\n  registerForm: FormGroup;\n  errorMessage: string;\n  isAuth: boolean;\n\n\n  constructor(private fb: FormBuilder, private authService: AuthService, private router: Router) {\n    this.registerForm = this.fb.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required],\n      confirmPassword: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]]\n    });\n  }\n  \n  ngOnInit() {\n    this.authService.isAuthenticated$.subscribe(isAuth => {\n      this.isAuth = isAuth;\n    });\n  }\n\n  onSubmit() {\n    if (this.registerForm.invalid || this.registerForm.value.password !== this.registerForm.value.confirmPassword) {\n      this.errorMessage = 'Passwords do not match.';\n      return;\n    }\n\n    // Passwords match, proceed with registration\n    this.errorMessage = '';\n\n    const username = this.registerForm.get('username').value;\n    const password = this.registerForm.get('password').value;\n    const email = this.registerForm.get('email').value;\n\n    const userRegister = { username, password, email };\n\n    this.authService.registerAndLogin(userRegister)\n      .pipe(\n        catchError((error) => {\n          this.errorMessage = \"Error: Invalid Username or email.\";\n          return of(null);\n        })\n      )\n      .subscribe(\n        (response: ServiceResponse<any>) => {\n          if (response && response.success) {\n            this.router.navigate(['/']);\n          }\n        }\n      );\n  }\n}\n"],"mappings":";AAAA;AACA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAAiCC,UAAU,QAAQ,gBAAgB;AAInE,SAASC,UAAU,EAAEC,EAAE,QAAQ,MAAM;AAO9B,WAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAM5BC,YAAoBC,EAAe,EAAUC,WAAwB,EAAUC,MAAc;IAAzE,KAAAF,EAAE,GAAFA,EAAE;IAAuB,KAAAC,WAAW,GAAXA,WAAW;IAAuB,KAAAC,MAAM,GAANA,MAAM;IACnF,IAAI,CAACC,YAAY,GAAG,IAAI,CAACH,EAAE,CAACI,KAAK,CAAC;MAChCC,QAAQ,EAAE,CAAC,EAAE,EAAEV,UAAU,CAACW,QAAQ,CAAC;MACnCC,QAAQ,EAAE,CAAC,EAAE,EAAEZ,UAAU,CAACW,QAAQ,CAAC;MACnCE,eAAe,EAAE,CAAC,EAAE,EAAEb,UAAU,CAACW,QAAQ,CAAC;MAC1CG,KAAK,EAAE,CAAC,EAAE,EAAE,CAACd,UAAU,CAACW,QAAQ,EAAEX,UAAU,CAACc,KAAK,CAAC;KACpD,CAAC;EACJ;EAEAC,QAAQA,CAAA;IACN,IAAI,CAACT,WAAW,CAACU,gBAAgB,CAACC,SAAS,CAACC,MAAM,IAAG;MACnD,IAAI,CAACA,MAAM,GAAGA,MAAM;IACtB,CAAC,CAAC;EACJ;EAEAC,QAAQA,CAAA;IACN,IAAI,IAAI,CAACX,YAAY,CAACY,OAAO,IAAI,IAAI,CAACZ,YAAY,CAACa,KAAK,CAACT,QAAQ,KAAK,IAAI,CAACJ,YAAY,CAACa,KAAK,CAACR,eAAe,EAAE;MAC7G,IAAI,CAACS,YAAY,GAAG,yBAAyB;MAC7C;;IAGF;IACA,IAAI,CAACA,YAAY,GAAG,EAAE;IAEtB,MAAMZ,QAAQ,GAAG,IAAI,CAACF,YAAY,CAACe,GAAG,CAAC,UAAU,CAAC,CAACF,KAAK;IACxD,MAAMT,QAAQ,GAAG,IAAI,CAACJ,YAAY,CAACe,GAAG,CAAC,UAAU,CAAC,CAACF,KAAK;IACxD,MAAMP,KAAK,GAAG,IAAI,CAACN,YAAY,CAACe,GAAG,CAAC,OAAO,CAAC,CAACF,KAAK;IAElD,MAAMG,YAAY,GAAG;MAAEd,QAAQ;MAAEE,QAAQ;MAAEE;IAAK,CAAE;IAElD,IAAI,CAACR,WAAW,CAACmB,gBAAgB,CAACD,YAAY,CAAC,CAC5CE,IAAI,CACHzB,UAAU,CAAE0B,KAAK,IAAI;MACnB,IAAI,CAACL,YAAY,GAAG,mCAAmC;MACvD,OAAOpB,EAAE,CAAC,IAAI,CAAC;IACjB,CAAC,CAAC,CACH,CACAe,SAAS,CACPW,QAA8B,IAAI;MACjC,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,OAAO,EAAE;QAChC,IAAI,CAACtB,MAAM,CAACuB,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;;IAE/B,CAAC,CACF;EACL;CACD;AAnDY3B,iBAAiB,GAAA4B,UAAA,EAL7BhC,SAAS,CAAC;EACTiC,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,0BAA0B;CACvC,CAAC,C,EACW/B,iBAAiB,CAmD7B"},"metadata":{},"sourceType":"module","externalDependencies":[]}